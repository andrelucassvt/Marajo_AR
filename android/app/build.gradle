def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.ar.sceneform.plugin'

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29

    lintOptions {
        checkReleaseBuilds false
    }
    
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.andre.marajoar"
        minSdkVersion 24
        versionCode 16
        versionName "1.0.13"
    }

    flavorDimensions "app"
    productFlavors {
 
        beta {
            dimension "app"
            applicationId "com.andre.marajoar.beta"
        }
 
        prod {
            dimension "app"
            applicationId "com.andre.marajoar"
        }
    }
   signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
   }
   buildTypes {
       release {
           signingConfig signingConfigs.release
       }
   }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.google.ar:core:1.28.0'
    implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.15.0'
    implementation 'com.google.ar.sceneform:core:1.15.0'
}

sceneform.asset('sampledata/caranguejo.fbx',
        'default',
        'sampledata/caranguejo.sfa',
        'src/main/assets/caranguejo')
        
sceneform.asset('sampledata/abacaxi.fbx',
        'default',
        'sampledata/abacaxi.sfa',
        'src/main/assets/abacaxi')

sceneform.asset('sampledata/queijo.obj',
        'default',
        'sampledata/queijo.sfa',
        'src/main/assets/queijo')

sceneform.asset('sampledata/vaso3.gltf',
        'default',
        'sampledata/vaso3.sfa',
        'src/main/assets/vaso')

sceneform.asset('sampledata/bufalo1.fbx',
        'default',
        'sampledata/bufalo1.sfa',
        'src/main/assets/bufalo')

sceneform.asset('sampledata/pirarucu.fbx',
        'default',
        'sampledata/pirarucu.sfa',
        'src/main/assets/pirarucu')

/* sceneform.asset('sampledata/acai.fbx',
        'default',
        'sampledata/acai.sfa',
        'src/main/assets/acai') */